

define id(#A: type, a: A): A = a

define refl(#A: type, #a: A): a ≡ a = i → a

// ideal syntax: x.refl
define x_refl(#A: type, a: A): a ≡ a = i → a

define x_refl_type(#A: type, a: A) = a ≡ a

// p.reverse
define path_reverse(#A: type, #x #y: A, p: x ≡ y): y ≡ x =
  i → p(~i)


// FIXME(META) why replace the body with refl doesn't works?
define path_reverse_unit(#A: type, x: A): (─ → x) ≡[─ → x ≡ x] path_reverse(x_refl(x)) =
  ─ → (─ → x)


// idea syntax: p.reverse statically determined!!
define dependent_path_reverse(#A1 #A2: type, #A: A1 ≡ A2, #x: A1, #y: A2, p: x ≡[A] y): y ≡[^path_reverse(A)] x =
  i → p(~i)


define path_compose(#A: type, #x #y #z: A, xy: x ≡ y, yz: y ≡ z): x ≡ z =
  i → hcomp(xy(i) |~i: x_refl(x) |i: yz)

/* TODO reimplement these
// a * b
define path_compose_filler(#A: type, #x #y #z: A, xy: x ≡ y, yz: y ≡ z, j i: I): A =
  hfill(xy(i) |~i: x_refl(x) |i: yz)(j)

define path_compose_unit_r(#A: type, #x #y: A, p: x ≡ y): p ≡ path_compose(p, x_refl(y)) =
  path_compose_filler(p, x_refl(y))


define path_compose_unit_l(#A: type, #x #y: A, p: x ≡ y): p ≡ path_compose(x_refl(x), p) =
  i → j → hcomp( x |~i: k → p(j ∧ k)
                  |~j: x_refl(x)
                  |j: p)
*/

// how can we statically choose which one to use?
/*
define dependent_path_compose(
  #A #B #C: type,
  #AB: A ≡ B, #BC: B ≡ C,
  #a: A, #b: B, #c: C,
  ab: a ≡[AB] b, bc: b ≡[BC] c): a ≡[^path_compose(AB, BC)] c = ???
*/


// TODO what syntax and name should this be? a.transp(p), p.transp(a), a^p, a|P, transp(a, p)???
define transport(#A #B: type, P: A ≡ B, a: A): B = transp(P, 0, a)

define transport_refl(#A: type, a: A): transport(─ → A, a) ≡ a =
  i → transp(─ → A, i, a)


define subst(#A: type, B: A ⇒ type, #x #y: A, p: x ≡ y, bx: B(x)): B(y) =
  transport(i → B(p(i)), bx)

define J_rule(#A: type, #x #y: A, P: (z: A, : x ≡ z) ⇒ type, d: P(x, refl), p: x ≡ y): P(y, p) =
  transport(i → P(p(i), j → p(i ∧ j)), d)

// #f #g: (x: #A) ⇒ #B(x),
define fun_ext(#A: type, #B: A ⇒ type, #f #g: (x: A) ⇒ B(x), p: (x: A) ⇒ f(x) ≡ g(x)): f ≡ g =
  i → x → p(x, i)

// TODO what's a proper name for this?
// define apd(#A: type, #B: A ⇒ type, f: (x: A) ⇒ B(x), x y: A, p: x ≡ y): coe(0, 1, i → B(p(i)), f(x)) ≡ f(y) =
//  i → coe(i, 1, j → B(p(j)), f(p(i)))


// cong(f, p) or p.map(f) or f.path_app(p) even f(p)?
define path_map(#A: type, #B: A ⇒ type, f: (x: A) ⇒ B(x), #x #y: A, p: x ≡ y): f(x) ≡[i → B(p(i))] f(y) =
  i → f(p(i))


// TODO define cong₂ in Cubical Agda


define is_prop(A: type): type = (a b: A) ⇒ a ≡ b

define is_set(A: type): type = (x y: A) ⇒ is_prop(x ≡ y)

define is_groupoid(A: type): type = (a b: A) ⇒ is_set(a ≡ b)

define is_groupoid2(A: type): type = (a b: A) ⇒ is_groupoid(a ≡ b)

define is_prop_is_contr(#A: type): is_prop(is_contr(A)) =
  z0 → z1 → j →
    make(
      z0.to_center(z1.center)(j),
      x → i → hcomp(z0.to_center(z1.to_center(x)(i))(j)
      |~i: k → z0.to_center(z1.center)(j)
      | i: k → z0.to_center(x)(j∨k)
      |~j: k → z0.to_center(x)(i∧k)
      | j: k → z1.to_center(x)(i)
      ))



define connection_both(#A: type, #a: A, p: a ≡ a): p ≡[i → p(i) ≡ p(i)] p =
  i → j → hcomp(a |~i: k → p(j∨(~k)) |i: k → p(j∧k) |~j: k → p(i∨(~k)) |j: k → p(i∧k))

/* TODO local match expression or with expression

define inductively h_level: type = sum {
  case contractible
  case suc(: h_level)
}

define is_h_level:
  h_level          ⇒ (type ⇒ type) =
┌ contractible     → is_contr
└ suc(b) → match(b,
    ┌ contractible → is_prop
    └ suc(c)       → A → (x y: A) ⇒ is_h_level(b)(x ≡ y))
*/



define singleton(#A: type, center: A) = record {
  field a: A
  field to_center: a ≡ center
}

/* TODO incomplete
define singleton_is_contr(#A: type, center: A):
   is_contr(singleton(center)) =
   make(make(center, refl), a → j → ???)
*/