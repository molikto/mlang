
define pointed: ^type = record {
  field #A: type
  field center: A
}


define loop_space(A: pointed): pointed =
  make(@(A.center ≡ A.center), refl)

define loop_space_2(A: pointed): pointed = loop_space(loop_space(A))

define loop_space_3(A: pointed): pointed = loop_space_2(loop_space(A))




define map_loop_space(#A: pointed, #B: type, f: A.A ⇒ B, p: loop_space(A).A): loop_space(pointed.make(f(A.center))).A =
  i → f(p(i))

define map_loop_space_2(#A: pointed, #B: type, f: A.A ⇒ B, p: loop_space_2(A).A): loop_space_2(pointed.make(f(A.center))).A =
  i → j →  f(p(i, j))

define map_loop_space_3(#A: pointed, #B: type, f: A.A ⇒ B, p: loop_space_3(A).A): loop_space_3(pointed.make(f(A.center))).A =
  i → j → k → f(p(i, j, k))


define fib_loop_space(#B: pointed, P: B.A ⇒ type, f: P(B.center), p: loop_space(B).A): type =
  f ≡[i → P(p(i))] f

define fib_loop_space_2(#B: pointed, P: B.A ⇒ type, f: P(B.center)): loop_space_2(B).A ⇒ type =
  fib_loop_space(@loop_space(B), fib_loop_space(P, f),  ─ → f)

define fib_loop_space_3(#B: pointed, P: B.A ⇒ type, f: P(B.center)): loop_space_3(B).A ⇒ type =
  fib_loop_space_2(@loop_space(B), fib_loop_space(P, f),  ─ → f)


// FIXME(META) this will result in unsloved meta
//define fib_loop_space_2(#B: pointed, P: B.A ⇒ type, f: P(B.center)): loop_space_2(B).A ⇒ type =
//  fib_loop_space(fib_loop_space(P, f), refl)

// FIXME(META) this will result in meta solution reify error, no value in scope???
//define fib_loop_space_2(#B: pointed, P: B.A ⇒ type, f: P(B.center)): loop_space_2(B).A ⇒ type =
//  fib_loop_space(@loop_space(B), fib_loop_space(P, f), refl)
