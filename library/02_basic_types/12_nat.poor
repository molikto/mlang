


// if we have termination checking, nat defined without "inductively" will fails to check, but now we don't
define inductively nat: type = sum {
  case zero
  case suc(: nat)
}

// TODO clean up when we have `with_constructor` and number literal
define zero = nat.zero
define suc(a: nat): nat = nat.suc(a)


// this definition allows more definitional equality
define plus(a b: nat): nat = run {
  define rec:
    pair(nat, nat) ⇒ nat =
  ┌ (zero, a)      → a
  ├ (a, zero)      → a
  └ (x, suc(y))    → suc(rec(make(x, y)))
  rec(make(a, b))
}

// currently we use `_test_xxx` to write test codes
define _test_plus = run {
  // alternative definitions, which we don't use
  define plus_alt_1:
  (a       b: nat) ⇒ nat =
    ─     ┌ zero → a
          └ suc(m) → suc(plus_alt_1(a, m))
  define plus_alt_2:
  (a       b: nat) ⇒ nat =
    ─     ┌ zero    → a
          └ suc(m)  → plus_alt_2(suc(a), m)

  define left_zero(a: nat): plus(a, zero) ≡ a = refl
  define right_zero(a: nat): plus(zero, a) ≡ a = refl
  define ttt1(a: nat): nat = plus(2, 4)
  define ttt2(a: nat): nat = plus(4, 2)
  define assert_tt2_eq_holder(b: (nat ⇒ nat) ⇒ type, c: (i: nat ⇒ nat) ⇒ b(i)): b(ttt1) = c(ttt2)
  define assert_nat_eq_holder2(x y: nat, b: (nat ⇒ nat) ⇒ type, c: (i: nat ⇒ nat) ⇒ b(i)): b(─ → plus(x, y)) = c(─ → plus(x, y))
  define ttt3(a: nat): nat = plus_alt_2(4, 2)
  define assert_tt2_eq_holder3(b: (nat ⇒ nat) ⇒ type, c: (i: nat ⇒ nat) ⇒ b(i)): b(ttt1) = c(ttt3)
  define ttt(a b: nat, c: nat ⇒ type, d: type ⇒ type): type = d(c(plus(a, b)))
  unit.make
}


/*

define plus_pointwise_lemma:
 (a   m: nat) ⇒ plus2(suc(a), m) ≡ suc(plus2(a, m)) =
  ─ ┌ zero    → ─ → suc(a)
    └ suc(n)  → i → plus_pointwise_lemma(suc(a), n, i)

define plus_pointwise:
 (a       b: nat) ⇒ plus(a, b) ≡ plus2(a, b) =
  ─     ┌ zero    → ─ → b
        └ suc(m)  → plus_pointwise() // suc(plus(a, m)) ≡ plus2(suc(a), m)

define path_plus12: plus ≡ plus2 = fun_ext(nat, ─ → nat, plus, plus2,

*/

define multi:
 (a       b: nat) ⇒ nat =
  ─     ┌ zero    → nat.zero
        └ suc(m)  → plus(a, multi(a, m))

define _test_multi = run {
  define eq16: plus(8, 8) ≡ multi(4, 4) = refl
  unit.make
}

define test_hcomp_nat: x_refl_type(hcomp(zero)) = x_refl(zero)

define fib:
(: nat) ⇒ nat =
┌ zero → 0
├ suc(zero) → 1
└ suc(suc(b)) → plus(fib(nat.suc(b)), fib(b))

define nat_pred: nat ⇒ nat =
┌ zero → 0
└ suc(n) → n


// TODO wish we have `projection` syntax
// then we can do
// projection (n: nat) is_even: bool
declare nat_is_even: nat ⇒ bool

define nat_is_odd:
  nat ⇒ bool =
┌ zero → bool.false
└ suc(m) → nat_is_even(m)

define nat_is_even =
┌ zero → bool.true
└ suc(m) → nat_is_odd(m)

// FIXME(META) when use path_map, it results in a core type check error
define inj_suc(#m #n: nat, p: nat.suc(m) ≡ nat.suc(n)): m ≡ n = i → nat_pred(p(i))

define discrete_nat: discrete(nat) = a → b → run {
  define znots(n: nat): negate(nat.zero ≡ nat.suc(n)) = eq → run {
     define c: nat ⇒ type =
      ┌ zero → nat
      └ suc(─) → empty
   subst(c, eq, 0)
  }

  define snotz(n: nat): negate(nat.suc(n) ≡ nat.zero) = eq → run {
     define c: nat ⇒ type =
      ┌ zero → empty
      └ suc(─) → nat
     subst(c, eq, 0)
  }

  define mat(m n: nat): decidable(m ≡ n) ⇒ decidable(suc(m) ≡ suc(n)) =
  ┌ yes(p) → _.yes(i → suc(p(i)))
  └ no(p) → _.no(x → p(inj_suc(x)))

  define rec: (ab: pair(nat, nat)) ⇒ decidable(ab.a ≡ ab.b) =
  ┌ (zero, zero) → _.yes(refl)
  ├ (zero, suc(k)) → _.no(znots(k))
  ├ (suc(k), zero) → _.no(snotz(k))
  └ (suc(m), suc(n)) → mat(m, n, rec(make(m, n)))
  rec(make(a, b))
}

define is_set_nat: is_set(nat) = discrete_then_is_set(discrete_nat)

// define inj_m_plus(#l #m: nat): (#n: nat, eq: plus(m, l) ≡ plus(m, n)) ⇒ l ≡ n =
// #┌ zero → p → p
//  └ suc(k) → p → inj_m_plus(inj_suc(p))
//
// define inj_plus_m(#l #m: nat): (#n: nat, eq: plus(l, m) ≡ plus(n, m)) ⇒ l ≡ n =


