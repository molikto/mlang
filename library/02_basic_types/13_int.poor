


define inductively int: type = sum {
  case pos(n: nat)
  case negsuc(n: nat)
}

define pos(a: nat): int = int.pos(a)
define negsuc(a: nat): int = int.negsuc(a)

define i0 = int.pos(n0)
define i1 = int.pos(n1)
define i2 = int.pos(n2)
define i3 = int.pos(n3)
define i4 = int.pos(n4)
define i5 = int.pos(n5)
define i6 = int.pos(n6)
define i7 = int.pos(n7)
define i8 = int.pos(n8)
define i16 = int.pos(n16)
define i32 = int.pos(n32)
define i64 = int.pos(n64)
define i128 = int.pos(n128)
define i256 = int.pos(n256)
define i512 = int.pos(n512)
define i1024 = int.pos(n1024)

define i1n = int.negsuc(zero)

define int_suc
: int            ⇒ int =
┌ pos(n)         → int.pos(suc(n))
├ negsuc(zero)   → int.pos(zero)
└ negsuc(suc(n)) → int.negsuc(n)


define int_pred
: int ⇒ int =
┌ pos(zero) → int.negsuc(zero)
├ pos(suc(n)) → int.pos(n)
└ negsuc(n) → int.negsuc(suc(n))



define int_suc_pred:
(i: int) ⇒ int_suc(int_pred(i)) ≡ i =
┌ pos(zero) → refl
├ pos(suc(n)) → refl
└ negsuc(n) → refl

define int_pred_suc:
(i: int) ⇒ int_pred(int_suc(i)) ≡ i =
┌ pos(n)         → refl
├ negsuc(zero)   → refl
└ negsuc(suc(n)) → refl

define inj_pos(#a #b: nat, c: int.pos(a) ≡ int.pos(b)): a ≡ b = run {
  define T: int ⇒ type =
  ┌ pos(x)  → a ≡ x
  └ negsuc(─) → empty
  subst(T, c, refl)
}

define inj_negsuc(#a #b: nat, c: int.negsuc(a) ≡ int.negsuc(b)): a ≡ b = run {
  define T: int ⇒ type =
  ┌ pos(─) → empty
  └ negsuc(x) → a ≡ x
  subst(T, c, refl)
}


define discrete_int: discrete(int) = a → b → run {

  define pos_not_negsuc(a b: nat, c: int.pos(a) ≡ int.negsuc(b)): empty = run {
    define T: int ⇒ type =
    ┌ pos(─)  → nat
    └ negsuc(─) → empty
    subst(T, c, n0)
  }

  define negsuc_not_pos(a b: nat, c: int.negsuc(a) ≡ int.pos(b)): empty = run {
    define T: int ⇒ type =
    ┌ pos(─)  → empty
    └ negsuc(─) → nat
    subst(T, c, n0)
  }

  define map_pos(m n: nat):  decidable(m ≡ n) ⇒ decidable(int.pos(m) ≡ int.pos(n)) =
  ┌ yes(p) → _.yes(i → pos(p(i)))
  └ no(p) → _.no(x → p(inj_pos(x)))

  define map_negsuc(m n: nat):  decidable(m ≡ n) ⇒ decidable(int.negsuc(m) ≡ int.negsuc(n)) =
  ┌ yes(p) → _.yes(i → negsuc(p(i)))
  └ no(p) → _.no(x → p(inj_negsuc(x)))
  define rec: (ab: pair(int, int)) ⇒ decidable(ab.a ≡ ab.b) =
   ┌ (pos(n), pos(m)) → map_pos(n, m, discrete_nat(n, m))
   ├ (pos(n), negsuc(m)) → _.no(pos_not_negsuc(n, m))
   ├ (negsuc(n), pos(m)) → _.no(negsuc_not_pos(n, m))
   └ (negsuc(n), negsuc(m)) → map_negsuc(n, m, discrete_nat(n, m))
   rec(make(a, b))
}

define int_suc_path: int ≡ int =
  ua(iso_to_equiv(make(int_suc, int_pred, int_suc_pred, int_pred_suc)))

define __int_suc_path_tests = run {
  define test1: transport(int_suc_path, i0) ≡ i1 = i → i1
  unit.make
}


define is_set_int: is_set(int) = discrete_then_is_set(discrete_int)