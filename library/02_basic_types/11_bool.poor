

define bool = sum { case false true }

// TODO with constructor syntax
define true = bool.true
define false = bool.false

define not:
  bool ⇒ bool =
┌ true → false
└ false → true


define bool_pointed: pointed = make(true)

define not_not(b: bool) = not(not(b))


define not_involutive
: (b: bool) ⇒ not_not(b) ≡ b =
┌ true → refl
└ false → refl


define if(#A: type):
 (b: bool, t f: A) ⇒ A =
┌ true → t → f → t
└ false → t → f → f

define bool_path_to_neg_bool: bool ≡ bool = ua(iso_to_equiv(make(not, not, not_involutive, not_involutive)))

define transp_true_is_false: bool = transport(bool_path_to_neg_bool, true)

define _test_bool = run {
  define transp_true_is_false: transport(bool_path_to_neg_bool, true) ≡ false = refl
  define transp_again_is_true: transport(bool_path_to_neg_bool, transport(bool_path_to_neg_bool, true)) ≡ true = refl
  unit.make
}