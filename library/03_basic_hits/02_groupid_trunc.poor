

define inductively groupoid_trunc(A: type): type = sum {
  case in(a: A)
  case squash(#x #y: groupoid_trunc(A), #p #q: x ≡ y, r s: p ≡ q, k j i: I
       |~k: r(j, i)
       | k: s(j, i)
       |~j: p(i)
       | j: q(i)
       |~i: x
       | i: y
       )
}

define groupoid_trunc_groupoid(A: type): groupoid =
  make(groupoid_trunc(A), x → y → p → q → r → s → k → j → i → groupoid_trunc(A).squash(@x, @y, @p, @q, r, s, k, j, i))


define rec_groupoid_trunc(#A #B: type, gB: is_groupoid(B), f: A ⇒ B):
  groupoid_trunc(A) ⇒ B =
┌ in(x) → f(x)
└ squash(x, y, p, q, r, s, k, j, i) →
  gB(
  // FIXME cannot infer these
    rec_groupoid_trunc(gB, f, x),
    rec_groupoid_trunc(gB, f, y),
    n → rec_groupoid_trunc(gB, f, r(0, n)),
    n → rec_groupoid_trunc(gB, f, r(1, n)),
    m → n → rec_groupoid_trunc(gB, f, r(m, n)),
    m → n → rec_groupoid_trunc(gB, f, s(m, n)),
    k, j, i)


define pointed_groupoid_trunc(p: pointed): pointed = make(groupoid_trunc(p.A).in(p.center))