
define alpha: join_S1 ⇒ S2 =
┌ inl(s) → S2.base
├ inr(s) → S2.base
└ push(x, y, i) → path_compose(S2_merid(y), S2_merid(x))(i)

define test_0_to_2: loop_space_3(S3_pointed).A =
  i → j → k → S3.surf(i, j, k)

define f3: loop_space_3(S3_pointed).A ⇒ loop_space_3(join_S1_pointed).A =
  p → i → j → k → S3_to_join_S1(p(i, j, k))

define test_0_to_3: loop_space_3(join_S1_pointed).A =
  f3(test_0_to_2)

define f4: loop_space_3(join_S1_pointed).A ⇒ loop_space_3(S2_pointed).A =
  p → i → j → k → alpha(p(i, j, k))

define test_0_to_4: loop_space_3(S2_pointed).A =
  f4(test_0_to_3)

define innerpath(i j: I): S2_hopf(test_0_to_4(i, j, 1)) =
  transp(k → S2_hopf(test_0_to_4(i, j, k)), 0, S1.base)


define problempath000_nf(a b: I) =
 hcomp(
  hcomp(
    hcomp(
      S2.surf(b, a)
      |~a: k → S2.base
      |a: k → S2.surf(b, k)
    )
    |~b: k → hcomp(S2.base |~a: ─ → S2.base | a: ─ → S2.base)
    |a: k → S2.base
    |~a: k → S2.base
    |b: k → hcomp(S2.surf(~k, a) |~a: ─ → S2.base | a: k2 → S2.surf(k, k2))
  )
  |a: k → hcomp(S2.base | k: ─ → S2.base |~k: ─ → S2.base)
  |b: k → hcomp(S2.base |~a: ─ → S2.base |k: ─ → S2.base |a∧(~k): ─ → S2.base)
  |~b: k → hcomp(S2.base |~a: ─ → S2.base | k: ─ → S2.base |a∧ (~k): ─ → S2.base)
  |~a: ─ → S2.base
  )

  
define problempath000(j k: I) =
  test_0_to_4(k, j, k)

// define problempath000_test: problempath000_nf ≡ problempath000 = ─ → problempath000
  
define problempath00(j k: I) =
  S2_hopf(test_0_to_4(k, j, k))

define problempath_simple(i: I) =
  transp(k → S2_hopf(hcomp(S2.surf(i, k) |~k: ─ → S2.base |k: ─ → S2.base)), 0, S1.base)

define __debug problempath0(j: I) =
  transp(k → S2_hopf(problempath000_nf(j, k)), 0, S1.base)

define problempath(j: I) =
  S1_helix(transp(k → S2_hopf(test_0_to_4(k, j, k)), 0, S1.base))

// put _debug after define to normalize it
define problem: int.pos(zero) ≡ int.pos(zero) =
  i → transp(j → S1_helix(innerpath(i ,j)), 0, int.pos(zero))







