

/*

// TODO implement type annotation (only allowing equality types)
define S1: type = sum {
  case base
  case loop: base ≡ base
}

// TODO implement boundary like redtt
define S2: type = sum {
  case base
  case surf(i j: I | ∂(i, j): base)
}
*/


define S1: type = sum {
  case base
  case loop(i: I | ~i: base | i: base)
}


define S1_basic_tests = run {
  define transp_base: x_refl_type(transp(i → S1, 0, S1.base)) = x_refl(S1.base)
  unit.make
}


// this is a stripe
define S1_moebius
: S1      ⇒ type =
┌ base    → bool
└ loop(i) → bool_path_to_neg_bool(i)


define S1_helix:
S1        ⇒ type =
┌ base    → int
└ loop(i) → int_suc_path(i)

define S1_loop_space = S1.base ≡ S1.base
define S1_loop(i: I) = S1.loop(i)
define S1_loop_inv(i: I) = S1.loop(~i)

define winding(p: S1_loop_space): int = transport(i → S1_helix(p(i)), i0)

define encode(x: S1, p: S1.base ≡ x): S1_helix(x) = subst(S1_helix, p, i0)

define int_loop: int ⇒ S1_loop_space =
┌ pos(zero) → refl
├ pos(suc(n)) → path_compose(int_loop(_.pos(n)), S1_loop)
├ negsuc(zero) → path_reverse(S1_loop)
└ negsuc(suc(n)) → path_compose(int_loop(_.negsuc(n)), path_reverse(S1_loop))

define decode: (x: S1) ⇒ S1_helix(x) ⇒ S1.base ≡ x =
┌ base → int_loop
└ loop(i) → y → j → run {
  define n = unglue(y)
  define decode_square: (n: int) ⇒ int_loop(int_pred(n)) ≡[i → S1.base ≡ S1.loop(i)] int_loop(n) =
  ┌ pos(zero) → i → j → S1.loop(i ∨ (~j))
  ├ pos(suc(n)) → i → j → hfill(int_loop(_.pos(n))(j) |~j: ─ → S1.base |j: S1_loop)(i)
  └ negsuc(n) → i → j → hcomp(int_loop(_.negsuc(n))(j) |i: ─ → int_loop(_.negsuc(n))(j) |~j: ─ → S1.base |j: k → S1.loop(i ∨ (~k)))
  hcomp(decode_square(n, i, j)
  |~i: k → int_loop(int_pred_suc(y, k), j)
  | i: ─ → int_loop(y, j)
  |~j: ─ → S1.base
  | j: ─ → S1.loop(i)
  )
}

define decode_encode(x: S1, p: S1.base ≡ x): decode(x, encode(x, p)) ≡ p =
  J_rule(y → q → decode(y, encode(y, q)) ≡ q, x → refl, p)

define is_set_loop_S1: is_set(S1_loop_space) =
 p → q → r → s → j → i →
 hcomp(decode(S1.base, is_set_int(winding(p), winding(q), path_map(winding, r), path_map(winding, s), j, i))
  |~i: decode_encode(S1.base, p)
  | i: decode_encode(S1.base, q)
  |~j: decode_encode(S1.base, r(i))
  | j: decode_encode(S1.base, s(i))
  )





define S1_loop2: S1_loop_space = path_compose(S1_loop, S1_loop)

define S1_winding_tests = run {

  define test_loop1: x_refl_type(i1) = x_refl(winding(S1_loop))

  define test_loop2: x_refl_type(i2) = x_refl(winding(S1_loop2))

  define test_loop3: x_refl_type(i3) = x_refl(winding(path_compose(S1_loop, S1_loop2)))

  define test_loopn1: x_refl_type(i1n) = x_refl(winding(S1_loop_inv))

  define test_loop_zero: x_refl_type(i0) = x_refl(winding(path_compose(S1_loop, S1_loop_inv)))

  define m_loop: (x: S1) ⇒ x ≡ x =
  ┌ base → S1_loop
  └ loop(i) → square_constant(S1_loop)(i)

  define mult(x: S1): S1 ⇒ S1 =
  ┌ base → x
  └ loop(i) → m_loop(x, i)

  define square(x: S1) = mult(x, x)

  define double_loop(l: S1_loop_space): S1_loop_space = i → square(l(i))

  define triple_loop(l: S1_loop_space): S1_loop_space = i → mult(l(i), square(l(i)))

  define loop_cap: nat ⇒ S1.base ≡ S1.base =
  ┌ zero → i → S1.base
  └ suc(n) → i → hcomp(loop_cap(n)(i) |~i: j → S1.base |i: S1_loop)

  define loop_left: nat ⇒ S1.base ≡ S1.base =
  ┌ zero → i → S1.base
  └ suc(n) → i → hcomp(S1_loop(i) |~i: j → loop_left(n)(~j) |i: j → S1.base)

  // DEBUG used time: 1481ms, compare cubicaltt: Time: 0m13.794s
  define test_loop_left_1024 = winding(loop_left(n1024))

  define test_i4: x_refl_type(i4) = x_refl(winding(double_loop(S1_loop2)))
  define test_i6: x_refl_type(i6) = x_refl(winding(triple_loop(S1_loop2)))
  define test_i8: x_refl_type(i8) = x_refl(winding(double_loop(double_loop(S1_loop2))))
  define test_i16: x_refl_type(i16) = x_refl(winding(double_loop(double_loop(double_loop(S1_loop2)))))
  define test_i32: x_refl_type(i32) = x_refl(winding(double_loop(double_loop(double_loop(double_loop(S1_loop2))))))
  unit.make
}




define S1_pointed: pointed = make(S1.base)

define rot_loop:
 (a: S1) ⇒ a ≡ a =
┌ base    → j → S1.loop(j)
└ loop(i) → j → hcomp(S1.base |~i: k → S1.loop(j∨(~k)) |i: k → S1.loop(j∧k) |~j: k → S1.loop(i∨(~k)) |j: k → S1.loop(i∧k) )


define rot_loop_inv(a: S1): (refl ≡[i → (rot_loop(rot_loop(a, ~i), i) ≡ a)] refl) =
  i → j → hcomp(rot_loop(rot_loop(a, (~i)∨j), i)
          |~i: k → a
          |i: k → rot_loop(a, j∧(~k))
          |~j: k → rot_loop(rot_loop(a, ~i), i)
          |j: k → rot_loop(a, i∧(~k))
          )


define rot: S1 ⇒ S1 ⇒ S1 =
┌ base → x → x
└ loop(i) → x → rot_loop(x, i)


define is_prop_fam_S1(P: S1 ⇒ type, pP: (x: S1) ⇒ is_prop(P(x)), b0: P(S1.base)): b0 ≡[i → P(S1.loop(i))] b0 =
  i → pP(S1.loop(i), transp(j → P(S1.loop(i∧j)), ~i, b0), transp(j → P(S1.loop(i∨(~j))), i, b0), i)

define rot_is_equiv:
 (a: S1) ⇒ is_equiv(rot(a)) =
┌ base → id_is_equiv(S1)
└ loop(i) → is_prop_fam_S1(x → is_equiv(rot(x)), x → is_prop_is_equiv(rot(x)), id_is_equiv(S1))(i)







