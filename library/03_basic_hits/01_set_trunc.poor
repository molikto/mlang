

define inductively set_trunc(A: type): type = sum {
  case in(a: A)
  case squash(x y: set_trunc(A), p q: x ≡ y, j i: I
       |~j: p(i)
       | j: q(i)
       |~i: x
       | i: y
       )
}

define set_trunc_set(A: type): set =
  make(set_trunc(A), x → y → p → q → j → i → set_trunc(A).squash(x, y, p, q, j, i))


define elim_set_trunc(
  #A #B: type,
  Bs: is_set(B),
  g: A ⇒ B
): (x: set_trunc(A)) ⇒ B =
┌ in(a) → g(a)
└ squash(x, y, p, q, i, j) →
Bs(
     elim_set_trunc(Bs, g, x),
     elim_set_trunc(Bs, g, y),
     i → elim_set_trunc(Bs, g)(p(i)),
     i → elim_set_trunc(Bs, g)(q(i)),
     i, j)