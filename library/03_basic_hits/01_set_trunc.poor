

define inductively set_trunc(A: type): type = sum {
  case in(a: A)
  case squash(x y: set_trunc(A), p q: x ≡ y, j i: I
       |~j: p(i)
       | j: q(i)
       |~i: x
       | i: y
       )
}

define set_trunc_set(A: type): set =
  make(set_trunc(A), x → y → p → q → j → i → set_trunc(A).squash(x, y, p, q, j, i))
