

define S2: type = sum {
  case base
  case surf(i j: I |~i: base |i: base |~j: base |j: base)
}


define S2_pointed = pointed.make(S2.base)


define S2_merid:
S1 ⇒ S2.base ≡ S2.base =
┌ base → refl
└ loop(i) → j → S2.surf(i, j)



define S2_hopf: S2 ⇒ type =
┌ base → S1
└ surf(i, j) → glue_type(S1
               |~i: make(S1, id_equiv(S1))
               |i: make(S1, id_equiv(S1))
               |~j: make(S1, id_equiv(S1))
               |j: make(S1, make(rot(S1.loop(i)), rot_is_equiv(S1.loop(i)))))



// FIXME again, this fib thing doesn't solves at all
define loop_space_3_hopf: loop_space_3(S2_pointed).A ⇒ type =
  fib_loop_space_3(@S2_pointed, S2_hopf, S1.base)

define S2_groupoid2_trunc = groupoid2_trunc(S2)

define fib_contr_loop_space_3_hopf(p: loop_space_3(S2_pointed).A): loop_space_3_hopf(p) =
  i → j → k →
    hcomp(transp(n → S2_hopf(p(i, j, k∧n)), i∨(~i)∨j∨(~j)∨(~k), S1.base)
    |~i: m → S1.base
    | i: m → S1.base
    |~j: m → S1.base
    | j: m → S1.base
    |~k: m → S1.base
    | k: m → is_set_loop_S1(
       refl,
       refl,
       i → j → transp(n → S2_hopf(p(i, j, n)), i ∨ (~i) ∨ j ∨ (~j), _.base),
       ─ → ─ → _.base,
       m, i, j
     )
    )

