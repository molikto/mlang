



define mult_two_aux: (x: S2) ⇒ x_refl_type(x_refl(S2_groupoid2_trunc.in(x))) =
┌ base → i → j → S2_groupoid2_trunc.in(S2.surf(i, j))
└ surf(k, l) → i → j → run {
  define step1(k i j: I): S2_groupoid2_trunc =
    hcomp(S2_groupoid2_trunc.in(S2.surf(i, j))
    |~i: m → S2_groupoid2_trunc.in(S2.surf(k, l∧m))
    | i: m → S2_groupoid2_trunc.in(S2.surf(k, l∧m))
    |~j: m → S2_groupoid2_trunc.in(S2.surf(k, l∧m))
    | j: m → S2_groupoid2_trunc.in(S2.surf(k, l∧m))
    |~k: m → S2_groupoid2_trunc.in(S2.surf(i, j))
    | k: m → S2_groupoid2_trunc.in(S2.surf(i, j))
    |~l: m → S2_groupoid2_trunc.in(S2.surf(i, j))
    )
  hcomp(step1(k, i, j)
  |~i: m → S2_groupoid2_trunc.in(S2.surf(k, l))
  | i: m → S2_groupoid2_trunc.in(S2.surf(k, l))
  |~j: m → S2_groupoid2_trunc.in(S2.surf(k, l))
  | j: m → S2_groupoid2_trunc.in(S2.surf(k, l))
  |~k: m → S2_groupoid2_trunc.in(S2.surf(i, j))
  | k: m → S2_groupoid2_trunc.in(S2.surf(i, j))
  |~l: m → S2_groupoid2_trunc.in(S2.surf(i, j))
  | l: m → S2_groupoid2_trunc.squash(
  // FIXME these metas is not currenlty solvable
  // when it is run (without given meta values), it first creates 6 metas, then try to check the
  // inner most j → step1(k, i, j) has same end points, then it try to check
  // step1(k, i, 0) has value of first meta, which will result in rebinding error because k, i is
  // not in scope
  // I guess this is when more complex meta solving is needed
    @ S2_groupoid2_trunc.in(S2.base),
    @ S2_groupoid2_trunc.in(S2.base),
    @ j → S2_groupoid2_trunc.in(S2.base),
    @ j → S2_groupoid2_trunc.in(S2.base),
    @ i → j → step1(0, i, j),
    @ i → j → step1(1, i, j),
    k → i → j → step1(k, i, j),
    k → i → j → step1(0, i, j),
    m, k, i, j)
  )
}


define mult_two_tilde_aux: (t: S2_groupoid2_trunc) ⇒ x_refl_type(x_refl(t)) =
┌ in(x) → mult_two_aux(x)
└ squash(x, y, p, q, r, s, t, u, k, l, m, n) → i → j →
   S2_groupoid2_trunc.squash(
     @ mult_two_tilde_aux(x, i, j),
     @ mult_two_tilde_aux(y, i, j),
     @ m → mult_two_tilde_aux(p(m), i, j),
     @ m → mult_two_tilde_aux(q(m), i, j),
     @ l → m → mult_two_tilde_aux(t(0, l, m), i, j),
     @ l → m → mult_two_tilde_aux(t(1, l, m), i, j),
     k → l → m → mult_two_tilde_aux(t(k, l, m), i, j),
     k → l → m → mult_two_tilde_aux(u(k, l, m), i, j),
     k, l, m, n
   )



define __debug mult_two_equiv_aux: x_refl_type(x_refl(id_equiv(S2_groupoid2_trunc))) = run {
  define f(i j: I): S2_groupoid2_trunc ⇒ S2_groupoid2_trunc =
    t → mult_two_tilde_aux(t, i, j)
  define common = is_prop_is_equiv(id(@S2_groupoid2_trunc), id_is_equiv(_), id_is_equiv(_))
  i → j → make(
    f(i, j),
    hcomp(transp(k → is_equiv(f(i, j∧k)), i ∨ (~i) ∨ (~j), id_is_equiv(_))
    |~i: common
    | i: common
    |~j: common
    | j: is_prop_is_equiv(
             id(@S2_groupoid2_trunc),
             transp(k → is_equiv(f(i, k)), i ∨ (~i), id_is_equiv(_)),
             id_is_equiv(S2_groupoid2_trunc))
    )
  )
}

define t_hopf_3: S3 ⇒ type =
┌ base → S2_groupoid2_trunc
└ surf(i, j, k) → run {
  define common = equiv_of(S2_groupoid2_trunc).make(S2_groupoid2_trunc, id_equiv(_))
  glue_type(S2_groupoid2_trunc |~i: common |i: common |~j: common |j: common |~k: make(S2_groupoid2_trunc, mult_two_equiv_aux(i, j)) |k: common)
}

define pi_3_S3(p: loop_space_3(S3_pointed).A): loop_space_2(pointed_groupoid2_trunc(S2_pointed)).A =
  i → j → transp(k → t_hopf_3(p(j, k, i)), 0, groupoid2_trunc(_).in(S2.base))

declare is_groupoid2_groupoid: ^is_groupoid2(groupoid)

declare is_groupoid_set: ^is_groupoid(set)

define code_S2(s: S2): groupoid = groupoid_trunc_groupoid(S2_hopf(s))

define code_trunc_S2: groupoid2_trunc(S2) ⇒ groupoid = rec_groupoid_trunc(is_groupoid2_groupoid, code_S2)

define encode_trunc_S2(p: loop_space(pointed_groupoid2_trunc(S2_pointed)).A): groupoid_trunc(S1) =
  transp(i → code_trunc_S2(p(i).A), 0, groupoid_trunc(_).in(S2.base))

define code_S1(s: S1): set = ???